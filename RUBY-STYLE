= duper's Ruby Style Guide (forked from dkubb (forked from chneukirchen))

This is basically a cheat sheet or reference guide (call it what you want)
in which I'm incrementally documenting Ruby-specific nuances/idiosyncrasies
and other useful information regarding common issues I encounter. The only goal
of the following text outline is to ease my development efforts with the Ruby
programming language. Do not feel obligated to follow these rules when 
contributing to projects that I'm also working on. These are simply guidelines 
to help me accomplish as much as possible in a minimal length of time.


== Documentation

* Browse web-based documentation at ruby-doc.org or api.rubyonrails.org

* Read documentation from the command-line with yri (YARD's ruby info script)

* More information about a specific gem can be viewed on the web site for the
  gem server, such as github.com or rubygems.org. 
  
* To view gem source code locally, simply navigate to the rubygems installation 
  directory under $GEM_PATH/gems (Note: gempath is defined in ~/.gemrc)

* Further help may be sought from the following channels on Freenode IRC:
  - #ruby (original, but now deprecated channel name)
  - #ruby-lang (official Ruby language chat)
  - #rails (discussion pertaining to Ruby on Rails)
  - #rvm (talk related to Ruby Version Manager)
  - #bundler (questions concerning packaging of custom gem source code)
  - #nokogiri (chat about the parsing of tag/SGML-based document types)


== REPL (Read-Eval-Print-Loop):

* Configure a history file and GNU readline in the runcom/dot file for 
  interactive ruby under the filesystem pathname ~/.irbrc

* Setup a gem for irb that performs syntax highlighting.

* Output colorful highlighted syntax from the command line with the coderay gem.

* Example of modularizing ~/.irbrc configuration: load '/etc/.irbrc'


== Formatting:

* Use ASCII (or UTF-8, if you have to).

* Use 2 space indent, no tabs.

* Use Unix-style line endings.

* Use spaces around operators, after commas, colons and semicolons,
  around { and before }.

* No spaces after (, [ and before ], ).

* Indent `when` two spaces deeper than `case`.

* Use an empty line before the return value of a method (unless it
  only has one line), and an empty line between defs.

* Use YARD and its conventions for API documentation. Don't put an
  empty line between the comment block and the def.

* Use empty lines to break up a long method into logical paragraphs.

* Keep lines fewer than 80 characters.

* Strip trailing whitespace.

* To auto-format Ruby code in a manner similar to GNU indent, run rbeautify.


== Syntax:

* Use def with parentheses when there are arguments.

* Never use for, unless you exactly know why.

* Never use then, except in case statements.

* Use when x then ... for one-line cases.

* Use &&/|| for boolean expressions, and/or for control flow. (Rule
  of thumb: If you have to use outer parentheses, you are using the
  wrong operators.)

* Avoid multiline ?:, use if.

* Use parentheses when calling methods with arguments.

* Use {...} when defining blocks on one line. Use do...end for multiline
  blocks.

* Avoid return where not required.

* Avoid line continuation (\) where not required.

* Use ||= freely.

* Use OO regexps, and avoid =~ $0-9, $~, $` and $' when possible.

* Write raise Exception.new("message") as raise(Exception, 'message')


== Naming:

* Use snake_case for methods.

* Use CamelCase for classes and modules. (Keep acronyms like HTTP,
  RFC, XML uppercase.)

* Use SCREAMING_SNAKE_CASE for other constants.

* Do not use single letter variable names. Avoid uncommunicative names.

* Use consistent variable names. Try to keep the variable names close
  to the object class name.

* Use names prefixed with _ for unused variables.

* Do not use inject in library code. In app code it is ok.

* When defining binary operators, name the argument "other".

* Prefer map over collect, detect over find, select over find_all.


== Comments:

* Comments longer than a word are capitalized and use punctuation.
  Use one space after periods.

* Avoid superfluous comments.


== Security:

* Consider defining the global SAFE variable when handling untrusted/tainted 
  user input values; wrap it within a Kernel#module_eval or Kernel#class_eval 
  block to isolate security-sensitive statements.

* POSIX regular expression character classes can be useful for sanitizing
  user input strings, i.e. astr.gsub!(/[[:alpha:]+]/, '')

* Network anonymity support can be accomplished via the socksify and i2p gems.


== Optimization:

* Utilize parallel assignment syntax when it's logically appropriate.

* Time loops likely to have exponential amounts of iteration with the stdlib
  Benchmark class and modify code to speedup as needed based on observations.

* Take advantage of buffered I/O with block syntax where possible, i.e. 
  File#each_line, HTTPResponse#each_chunk, etc. 

* Define a custom each_chunk method on classes that perform I/O and fail to 
  provide native buffered I/O functionality.

* Test time-sensitive code on alternate implementations of the Ruby MRI VM such
  as JRuby, rubinius, IronRuby, etc.

* Avoid things like (1 .. n).to_a.each in favor of (1 .. n).each

* A yield statement is significantly faster than Proc#call for blocks.


== RESTful Web Services:

* Use the Nokogiri gem for parsing well-formed XML or HTML documents.

* Strip all XML and HTML tags from a string value with the sanitize gem via the
  simple statement: Sanitize.clean(str)

* Quickly parse AJAX data fetched from an URL into a JSON object with open-uri
  and json from stdlib via: JSON.parse(open('http://host.dom/ajax').read)


== Tasks:

* Utilize the jekyll and hyde gems to auto-generate presentation slides as 
  static HTML documents.

* Consider using the parslet gem when developing rulesets in order to tokenize
  and parse arbitrary data formats.

* Package custom gem source trees with bundler and/or ore.

* Use rvm (Ruby Version Manager) to maintain multiple Ruby installations.

* Specify gem dependencies in the bundler gemspec file with syntax shown below:
  - '0.9.15' or '= 0.9.15' (specified version only)
  - '>~ 0.9' (greater than or equal to specified version)
  - '>~ 0.9.15' (greater than 0.9.x but less than 1.0)


== Debugging:

* To trace executed script statements, run ruby -rtracer script_name.rb at a 
  command prompt or programatically instantiate the Tracer class from stdlib.

* If the instantiated class requiring inspection implements a to_yaml method for 
  viewing object state variables, then the helper method defined within the
  ActiveRecord::Helpers::DebugHelper namespace may suffice.


== Miscellaneous:

* Avoid hashes-as-optional-parameters. Does the method do too much?

* Avoid long methods.

* Avoid long parameter lists.

* Use def self.method to define singleton methods.

* Add "global" methods to Kernel (if you have to) and make them private.

* Avoid alias when alias_method will do.

* Always freeze objects assigned to constants.

* Use OptionParser for parsing complex command line options and
  ruby -s for trivial command line options.

* Write for 1.9, but avoid doing things you know that will break in 1.8.

* Avoid needless metaprogramming.

* Only give a method one purpose for existing. If you pass in a boolean
  to a method, what you're saying is that this method has two different
  behaviours. Just split it into two single purpose methods. If you have
  to use the words "AND" or "OR" to describe what the method does it
  probably does too much.

* If sections of a method are logically separate by blank lines, then
  that's probably a sign that those sections should be split into separate
  methods.

* Try to keep methods at no more than 10 lines long, and preferably
  5 or less.


== General:

* Code in a functional way, avoid mutation when it makes sense.

* Try to have methods either return the state of the object and have
  no side effects, or return self and have side effects. This is
  otherwise known as Command-query separation (CQS):

    http://en.wikipedia.org/wiki/Command-query_separation

* Do not mutate arguments unless that is the purpose of the method.

* Do not mess around in core classes when writing libraries.

* Do not program defensively.
  (See http://www.erlang.se/doc/programming_rules.shtml#HDR11.)

* Keep the code simple.

* Don't overdesign.

* Don't underdesign.

* Avoid bugs.

* Read other style guides and apply the parts that don't dissent with
  this list.

* Be consistent.

* Use common sense.
